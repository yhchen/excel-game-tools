import * as path from 'path';
import * as fs from "fs";
import * as utils from "../utils";
import { forEach } from 'lodash';

class GoExport extends utils.IExportWrapper {
	constructor(exportCfg: utils.ExportCfg) { super(exportCfg); }

	public get DefaultExtName(): string { return '.go'; }
	protected async ExportTo(dt: utils.SheetDataTable): Promise<boolean> {

		const arrExportHeader = utils.ExecGroupFilter(dt.sheetName, this._exportCfg.GroupFilter, dt.arrTypeHeader);
		if (arrExportHeader.length <= 0) {
			utils.debug(`Pass Sheet ${utils.yellow_ul(dt.sheetName)} : No Column To Export.`);
			return true;
		}
		const outfile = path.join(this._exportCfg.OutputDir, `${dt.sheetName}.go`);
		const name = this.lowercaseFirstLetter(dt.sheetName);
		const Name = dt.sheetName;
		let ctx = this.ConfigTemplate.replace(/{name}/g, name).replace(/{Name}/g, Name).replace(/{excelName}/g, path.basename(dt.sheetTable[0].fileName)).replace(/{sheetName}/g, dt.sheetName);

		await fs.promises.writeFile(outfile, ctx, { encoding: 'utf8', flag: 'w+' });
		this._globalObj.push(dt.sheetName);
		utils.debug(`${utils.green('[SUCCESS]')} Output file "${utils.yellow_ul(outfile)}". `
			+ `Total use tick:${utils.green(utils.TimeUsed.LastElapse())}`);
		return true;
	}

	protected async ExportGlobal(): Promise<boolean> {
		const outfile = path.join(this._exportCfg.OutputDir, `initialize.go`);
		let ctx = '';
		for (let s of this._globalObj) {
			ctx += `\t${s} = new${s}()\n`;
		}
		ctx = this.InitTemplate.replace(/{data}/g, ctx);
		await fs.promises.writeFile(outfile, ctx, { encoding: 'utf8', flag: 'w+' });
		utils.debug(`${utils.green('[SUCCESS]')} Output file "${utils.yellow_ul(outfile)}". `
			+ `Total use tick:${utils.green(utils.TimeUsed.LastElapse())}`);
		return true;
	}

	private _globalObj = new Array<string>();

	// Helper function to lowercase the first letter of a string
	private lowercaseFirstLetter(str: string): string {
		return str.charAt(0).toLowerCase() + str.slice(1);
	}

	private InitTemplate = 
`package game_config
// auto generated by tools, do not edit it manually
// Initialize 初始化游戏配置
func Initialize() {
{data}
}
`;

	private ConfigTemplate = 
`package game_config
import (
	"kairo_paradise_server/internal/consts"
	"kairo_paradise_server/internal/logger"
	"kairo_paradise_server/services/pb"
	"path/filepath"
)

// auto generated by tools, do not edit it manually
// {excelName} {sheetName}

type {name} struct {
	data map[int32]*pb.List{Name}_{Name}
	ids  []int32
}

var {name}Func = func() *pb.List{Name} { return &pb.List{Name}{} }

var {Name} *{name}

func new{Name}() *{name} {
	result := &{name}{
		data: make(map[int32]*pb.List{Name}_{Name}),
		ids:  make([]int32, 0),
	}

	listConfig, err := loadProtoFile(filepath.Join(consts.GameConfigPath, "{Name}.bytes"), {name}Func)
	if err != nil {
		logger.Errorf("load {Name}.bytes error: %v", err)
		return result
	}
	for _, item := range listConfig.List {
		if item.Id != nil {
			id := *item.Id
			result.data[id] = item
			result.ids = append(result.ids, id)
		}
	}
	return result
}

func (c *{name}) Item(id int32) *pb.List{Name}_{Name} {
	return c.data[id]
}

func (c *{name}) Items() []*pb.List{Name}_{Name} {
	items := make([]*pb.List{Name}_{Name}, 0, len(c.data))
	for _, item := range c.data {
		items = append(items, item)
	}
	return items
}

func (c *{name}) GetIds() []int32 {
	return c.ids
}
`;
}

module.exports = function (exportCfg: utils.ExportCfg): utils.IExportWrapper { return new GoExport(exportCfg); };
